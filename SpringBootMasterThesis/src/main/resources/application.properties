# DataSource properties
# spring.datasource.url=jdbc:postgresql://localhost:5432/sb_app_db_ver2?reWriteBatchedInserts=true&?cachePrepStmts=true&useServerPrepStmts=true&rewriteBatchedStatements=true
spring.datasource.url=jdbc:postgresql://localhost:5432/sb_app_db_ver2
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.connectionTestQuery=SELECT 1

# following properties setup by following: https://stackoverflow.com/a/47246045/6805866 
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=2
# prev value of maximum-pool-size=10
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=SpringBootJPAHikariCP
# maximum lifetime in milliseconds of a connection in the pool after it is closed.
spring.datasource.hikari.max-lifetime=2000000
# connection-timeout is measured in  ms => 500000ms <=> 500 seconds
# added for avoiding DEADLOCK DB timeout
# connection-timeout changed from 500000 to 30000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.validation-timeout=1000

# Without below HikariCP uses deprecated com.zaxxer.hikari.hibernate.HikariConnectionProvider
# Surprisingly enough below ConnectionProvider is in hibernate-hikaricp dependency and not hibernate-core
# So you need to pull that dependency but, make sure to exclude it's transitive dependencies or you will end up 
# with different versions of hibernate-core -> probably NOT necessary since this was from SpringBoot 2.0.0M6 version 
#spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider


# Minimum amount of worker threads. (Default is 10, great results 2)
server.tomcat.min-spare-threads=2 
# Maximum amount of worker threads. (Default is 200, great results 20)
server.tomcat.max-threads=10



server.port=8080
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# change value of "**.hibernate.ddl-auto" to  "none"
spring.jpa.hibernate.ddl-auto=none
# SQL shown for DEBBUGING purposes
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.generate_statistics=false
# spring.jpa.properties.hibernate.jdbc.batch_size=20
# spring.jpa.properties.hibernate.order_inserts=true
# spring.jpa.properties.hibernate.order_updates=true

spring.liquibase.change-log=classpath:db/changelog.xml

# added by following instructions at: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-jmx
spring.jmx.enabled=true

# next 3 lines are added by "Meter filters" example from following link:  
# 	https://spring.io/blog/2018/03/16/micrometer-spring-boot-2-s-new-application-metrics-collector 
management.metrics.distribution.sla.http.server.requests=1ms,5ms
management.metrics.enable.jvm=true

management.metrics.export.jmx.domain=com.nikolas.master_thesis.metrics
# next line is Step size (i.e. reporting frequency) to use.
management.metrics.export.jmx.step=1s

# UNCOMMENTED next line to view GET endpoints
management.metrics.enable.all=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.endpoints.jmx.exposure.include=*
management.endpoints.web.exposure.include=*

# set value to `false` to view GET endpoints with(OUT) Exception in it
#management.metrics.export.jmx.enabled=false 

#management.metrics.web.server.request.autotime.enabled=true

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#logging.level.org.hibernate.type=TRACE
